import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime, timedelta

CSV_FILE = "enhanced_satta_data.csv"
HEADERS = {"User-Agent": "Mozilla/5.0"}

MARKETS = {
    "Time Bazar": "https://dpbossattamatka.com/panel-chart-record/time-bazar.php",
    "Milan Day": "https://dpbossattamatka.com/panel-chart-record/milan-day.php",
    "Rajdhani Day": "https://dpbossattamatka.com/panel-chart-record/rajdhani-day.php",
    "Kalyan": "https://dpbossattamatka.com/panel-chart-record/kalyan.php",
    "Milan Night": "https://dpbossattamatka.com/panel-chart-record/milan-night.php",
    "Rajdhani Night": "https://dpbossattamatka.com/panel-chart-record/rajdhani-night.php",
    "Main Bazar": "https://dpbossattamatka.com/panel-chart-record/main-bazar.php"
}

def parse_cell(cell):
    parts = cell.decode_contents().split('<br>')
    return ''.join(BeautifulSoup(p, 'html.parser').get_text(strip=True) for p in parts)

def get_latest_result(url):
    try:
        res = requests.get(url, headers=HEADERS, timeout=10)
        res.encoding = 'utf-8'
        soup = BeautifulSoup(res.text, 'html.parser')
        for table in soup.find_all("table"):
            rows = table.find_all("tr")
            for row in reversed(rows):
                cols = row.find_all("td")
                if len(cols) >= 4 and 'to' in cols[0].text:
                    start_date = cols[0].text.split('to')[0].strip()
                    try:
                        base_date = datetime.strptime(start_date, "%d/%m/%Y")
                    except:
                        continue
                    cells = cols[1:]
                    total_days = len(cells) // 3
                    index = total_days - 1
                    date = (base_date + timedelta(days=index)).strftime("%d/%m/%Y")
                    o, j, c = cells[index*3: index*3+3]
                    if '**' in o.text or '**' in j.text or '**' in c.text:
                        return {'date': date, 'open': '', 'jodi': '', 'close': '', 'status': 'Not declared'}
                    return {
                        'date': date,
                        'open': parse_cell(o),
                        'jodi': parse_cell(j),
                        'close': parse_cell(c),
                        'status': 'ok'
                    }
    except Exception as e:
        return {'status': f'error: {e}'}

# Load existing CSV
try:
    df = pd.read_csv(CSV_FILE)
    existing_dates = set(zip(df['Date'], df['Market']))
except:
    df = pd.DataFrame(columns=['Date', 'Market', 'Open', 'Jodi', 'Close'])
    existing_dates = set()

new_rows = []

for market, url in MARKETS.items():
    print(f"Checking {market}...")
    result = get_latest_result(url)
    if result.get("status") == "ok":
        if (result['date'], market) not in existing_dates:
            print(f"  ➕ New result found: {result['date']} - {market}")
            new_rows.append({
                'Date': result['date'],
                'Market': market,
                'Open': result['open'],
                'Jodi': result['jodi'],
                'Close': result['close']
            })
        else:
            print(f"  ✅ Already in CSV: {result['date']} - {market}")
    else:
        print(f"  ⚠️ Skipped {market}: {result.get('status')}")

# Append and save
if new_rows:
    new_df = pd.DataFrame(new_rows)
    final_df = pd.concat([df, new_df], ignore_index=True)
    final_df.to_csv(CSV_FILE, index=False)
    print(f"\n✅ Appended {len(new_rows)} new rows to {CSV_FILE}")
else:
    print("\n✅ No new results found")